@using WebApp_GozenBv.Constants;
@model WebApp_GozenBv.ViewModels.StockLogDetailVM

@{
    ViewData["Title"] = "Details";
}

<h1>Details</h1>

<h4>StockLog</h4>
<hr />
<table class="table">
    <thead>
        <tr>
            <th scope="col">@Html.DisplayNameFor(model => model.StockLogDate)</th>
            <th scope="col">@Html.DisplayNameFor(model => model.StockLog.Employee)</th>
            <th scope="col">@Html.DisplayNameFor(model => model.Status)</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>@Html.DisplayFor(model => model.StockLogDate)</td>
            <td>@Html.DisplayFor(model => model.EmployeeFullNameFirma)</td>
            <vc:status-icon col="6" status="@Model.Status" is-damaged="@Model.IsDamaged"></vc:status-icon>
        </tr>
    </tbody>
    <thead>
        <tr>
            <th scope="col">@Html.DisplayNameFor(model => model.StockLogItems)</th>
        </tr>
        <tr>
            <th>@Html.DisplayNameFor(model => model.StockLogItem.StockId)</th>
            <th>@Html.DisplayNameFor(model => model.StockLogItem)</th>
            @if (Model.IsDamaged)
            {
                <th>@Html.DisplayNameFor(model => model.StockLogItem.Cost)</th>

            }
            <th>@Html.DisplayNameFor(model => model.StockLogItem.StockAmount)</th>
            @if (Model.IsDamaged && Model.Status == StockLogStatusConst.Returned)
            {
                <th>@Html.DisplayNameFor(model => model.StockLogItem.DamagedAmount)</th>
                <th>@Html.DisplayNameFor(model => model.StockLogItem.RepairedAmount)</th>
                <th>@Html.DisplayNameFor(model => model.StockLogItem.DeletedAmount)</th>
            }
            @if (Model.Status == StockLogStatusConst.DamagedAwaitingAction)
            {
                <th>@Html.DisplayNameFor(model => model.StockLogItem.DamagedAmount)</th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.StockLogItems)
        {
            <tr>
                <td>@item.StockId</td>
                <td>@item.ProductNameBrand</td>
                @if (Model.IsDamaged)
                {
                    @if (item.IsDamaged)
                    {
                        <td>@item.Cost</td>
                    }
                    else
                    {
                        <td></td>
                    }
                }
                <td>@item.StockAmount</td>
                @if (Model.IsDamaged && Model.Status == StockLogStatusConst.Returned && item.IsDamaged)
                {
                    <td>@item.DamagedAmount</td>
                    <td>@item.RepairedAmount</td>
                    <td>@item.DeletedAmount</td>
                }

                @if (Model.Status == StockLogStatusConst.DamagedAwaitingAction)
                {
                    if (item.DamagedAmount != 0)
                    {
                        <td>@item.DamagedAmount</td>
                    }
                    else
                    {
                        <td></td>
                    }
                }
            </tr>
        }
    </tbody>
</table>

<div>
    <vc:user-log view="@ViewTypeConst.Entity" controller="@ControllerConst.StockLog" entity-id="@Model.LogCode"></vc:user-log>
</div>

<div class="d-flex flex-column">
    <a asp-action="Index">Back to List</a>

    @switch (Model.Status)
    {
        case StockLogStatusConst.Created:
            <a asp-action="CompleteReturn" asp-route-id="@Model.LogCode">Complete Return</a>
            break;

        case StockLogStatusConst.DamagedAwaitingAction:
            <a asp-action="Undo" asp-route-id="@Model.LogCode">Undo</a>
            <a asp-action="CompleteDamaged" asp-route-id="@Model.LogCode">Complete Damaged</a>
            break;

        case StockLogStatusConst.Returned:
            <a asp-action="Undo" asp-route-id="@Model.LogCode">Undo</a>
            break;
    }
</div>
<input id="statusId" type="hidden" value="@Model.Status" />
<script src="~/js/StockLog_Details.js"></script>
